from telebot import types
from components.ai.stability import generate_text_to_image
from config import BACKEND_URL
import datetime
import requests
from PIL import Image, ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True
from components.database import DB

def generate(message,bot):
    """
    This function responds to the /generate command

    Args:
        message (telebot.types.Message): The message object
        bot (telebot.TeleBot): The bot object
    
    Returns:
        None
    """ 
    group = DB['group'].find_one({"_id": message.chat.id})
    print(group)
    image_responses = requests.get(BACKEND_URL+"/image/user/"+str(message.from_user.id))
    # Get the number of images generated by the user where created_at is today
    image_count = 0
    for image in image_responses.json():
        if image["created_at"].split(" ")[0] == str(datetime.date.today()):
            image_count += 1
    # calculate time left until the end of the day
    print(image_count)
    time_left = datetime.datetime.combine(datetime.date.today(), datetime.time.max) - datetime.datetime.now()
    if image_count >= 3:
        bot.reply_to(message, "You have reached the maximum number of images you can generate for today. Please try again in " + (str(time_left).split(".")[0]).split(":")[0] + " hours and " + (str(time_left).split(".")[0]).split(":")[1] + " minutes.")
        return
    try:
        prompt = message.text.split(" ", 1)[1]
        print(prompt)
    except:
        bot.reply_to(message, "The structure of the command is incorrect. Please try /generate <prompt>.")
        return
    params = {
        "prompt": prompt,
        "name":message.from_user.username,
        "user_id": message.from_user.id,
        "group_id": message.chat.id,
    }
    image_file_path = "v1_txt2img_0.png"
    try:
        generate_text_to_image(prompt)
    except Exception as e:
        print(e)
        bot.reply_to(message, "You have entered an invalid prompt. Please try again.")
        return
    with open(image_file_path, "rb") as image_file:
        files = {
            "image_file": (image_file_path, image_file, "image/png")
        }
        response = requests.post(BACKEND_URL+"/images", params=params, files=files)
    image = Image.open(image_file_path)
    watermark = Image.open("image/watermark.png")
    image.paste(watermark, (0, 0), watermark)
    image.save(image_file_path)
    ads_string = """"""
    sponsored_ads = """"""
    if group is not None:
        for ad in group["common_ads"]:
            ads_string += f'<a href="{ad["link"]}">{ad["name"]}</a> | '
    
        for ad in group["sponsored_ads"]:
            sponsored_ads += f'<a href="{ad["link"]}">{ad["name"]}</a> | '
    
    caption = f"""
Ad: {ads_string} \n
Sponsored Ad: {sponsored_ads}
    """
    bot.send_photo(message.chat.id, photo=open('v1_txt2img_0.png', 'rb'), caption=caption, parse_mode='HTML')
 
